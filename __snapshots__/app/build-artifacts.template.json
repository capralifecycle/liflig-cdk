{
  "Resources": {
    "BuildArtifactsS3BucketF34A0F91": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "BucketName": "some-bucket-name",
        "LifecycleConfiguration": {
          "Rules": [
            {
              "NoncurrentVersionExpiration": {
                "NoncurrentDays": 10
              },
              "Status": "Enabled"
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "build-artifacts"
          }
        ],
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BuildArtifacts/S3Bucket/Resource"
      }
    },
    "BuildArtifactsS3BucketNotifications8F606582": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "BuildArtifactsS3BucketF34A0F91"
        },
        "NotificationConfiguration": {
          "EventBridgeConfiguration": {}
        },
        "Managed": true
      },
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BuildArtifacts/S3Bucket/Notifications/Resource"
      }
    },
    "BuildArtifactsS3BucketPolicy963F6593": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "BuildArtifactsS3BucketF34A0F91"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::112233445566:root"
                    ]
                  ]
                }
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BuildArtifactsS3BucketF34A0F91",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BuildArtifactsS3BucketF34A0F91",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BuildArtifacts/S3Bucket/Policy/Resource"
      }
    },
    "BuildArtifactsEcrRepository58C90D9A": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "LifecyclePolicy": {
          "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"selection\":{\"tagStatus\":\"any\",\"countType\":\"sinceImagePushed\",\"countNumber\":180,\"countUnit\":\"days\"},\"action\":{\"type\":\"expire\"}}]}"
        },
        "RepositoryName": "some-ecr-repo-name",
        "RepositoryPolicyText": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::112233445566:root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "build-artifacts"
          }
        ]
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BuildArtifacts/EcrRepository/Resource"
      }
    },
    "BuildArtifactsOpenIdConnectProviderD0DD3330": {
      "Type": "AWS::IAM::OIDCProvider",
      "Properties": {
        "ClientIdList": [
          "sts.amazonaws.com"
        ],
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "build-artifacts"
          }
        ],
        "ThumbprintList": [
          "1c58a3a8518e8759bf075b76b750d4f2df264fcd"
        ],
        "Url": "https://token.actions.githubusercontent.com"
      },
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BuildArtifacts/OpenIdConnectProvider"
      }
    },
    "BuildArtifactsGithubActionsRole57AE9876": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "token.actions.githubusercontent.com:sub": [
                    "repo:capralifecycle/my-repository:ref:refs/heads/master"
                  ]
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "BuildArtifactsOpenIdConnectProviderD0DD3330"
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "RoleName": "github-actions-role",
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "build-artifacts"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BuildArtifacts/GithubActionsRole/Role/Resource"
      }
    },
    "BuildArtifactsGithubActionsRoleDefaultPolicyBFBC12F6": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ssm:PutParameter",
              "Effect": "Allow",
              "Resource": "arn:aws:ssm:eu-west-1:112233445566:parameter/liflig-cdk/*/pipeline-variables/*"
            },
            {
              "Action": [
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "BuildArtifactsS3BucketF34A0F91",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:CompleteLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:InitiateLayerUpload",
                "ecr:PutImage"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "BuildArtifactsEcrRepository58C90D9A",
                  "Arn"
                ]
              }
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BuildArtifactsGithubActionsRoleDefaultPolicyBFBC12F6",
        "Roles": [
          {
            "Ref": "BuildArtifactsGithubActionsRole57AE9876"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BuildArtifacts/GithubActionsRole/Role/DefaultPolicy/Resource"
      }
    },
    "BuildArtifactsGithubActionsLimitedRole15AAC240": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringLike": {
                  "token.actions.githubusercontent.com:sub": [
                    "repo:capralifecycle/my-repository:ref:refs/heads/*"
                  ]
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Ref": "BuildArtifactsOpenIdConnectProviderD0DD3330"
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "RoleName": "github-actions-limited-role",
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "build-artifacts"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BuildArtifacts/GithubActionsLimitedRole/Role/Resource"
      }
    },
    "BuildArtifactsGithubActionsLimitedRoleDefaultPolicyE701FA68": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ssm:PutParameter",
              "Effect": "Allow",
              "Resource": "arn:aws:ssm:eu-west-1:112233445566:parameter/liflig-cdk/*/pipeline-variables/dev*"
            },
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BuildArtifactsS3BucketF34A0F91",
                          "Arn"
                        ]
                      },
                      "/pipelines/*-prod/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BuildArtifactsS3BucketF34A0F91",
                          "Arn"
                        ]
                      },
                      "/pipelines/*-prod-*/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "BuildArtifactsS3BucketF34A0F91",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:CompleteLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:InitiateLayerUpload",
                "ecr:PutImage"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "BuildArtifactsEcrRepository58C90D9A",
                  "Arn"
                ]
              }
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BuildArtifactsGithubActionsLimitedRoleDefaultPolicyE701FA68",
        "Roles": [
          {
            "Ref": "BuildArtifactsGithubActionsLimitedRole15AAC240"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BuildArtifacts/GithubActionsLimitedRole/Role/DefaultPolicy/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "build-artifacts"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
        "Code": {
          "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def with_id(n):\n    n['Id'] = f\"{stack_id}-{hash(json.dumps(n, sort_keys=True))}\"\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        ids = [with_id(n) for n in old.get(t, [])]\n        old_incoming_ids = [n['Id'] for n in ids]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn"
          ]
        },
        "Runtime": "python3.11",
        "Timeout": 300,
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "build-artifacts"
          }
        ]
      },
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
      ],
      "Metadata": {
        "aws:cdk:path": "build-artifacts/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
      }
    }
  },
  "Outputs": {
    "BuildArtifactsEcrRepoUri8E98C2C4": {
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::Select": [
                4,
                {
                  "Fn::Split": [
                    ":",
                    {
                      "Fn::GetAtt": [
                        "BuildArtifactsEcrRepository58C90D9A",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            },
            ".dkr.ecr.",
            {
              "Fn::Select": [
                3,
                {
                  "Fn::Split": [
                    ":",
                    {
                      "Fn::GetAtt": [
                        "BuildArtifactsEcrRepository58C90D9A",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "BuildArtifactsEcrRepository58C90D9A"
            }
          ]
        ]
      }
    },
    "BuildArtifactsBucketNameFFDA2A82": {
      "Value": {
        "Ref": "BuildArtifactsS3BucketF34A0F91"
      }
    },
    "BuildArtifactsRoleArn13F92F8C": {
      "Value": {
        "Fn::GetAtt": [
          "BuildArtifactsGithubActionsRole57AE9876",
          "Arn"
        ]
      }
    },
    "BuildArtifactsLimitedRoleArnBDBFBD73": {
      "Value": {
        "Fn::GetAtt": [
          "BuildArtifactsGithubActionsLimitedRole15AAC240",
          "Arn"
        ]
      }
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}