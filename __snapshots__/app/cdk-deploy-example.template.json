{
  "Resources": {
    "CdkDeployRole9B95027D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": "role-arn"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "RoleName": "some-role-name",
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "cdk-deploy-example"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/Role/Resource"
      }
    },
    "CdkDeployRoleDefaultPolicyA51C9EE9": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CdkDeployStartDeployFunctionC7011EBD",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CdkDeployStartDeployFunctionC7011EBD",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CdkDeployStatusFunction54BEBDAD",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CdkDeployStatusFunction54BEBDAD",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CdkDeployRoleDefaultPolicyA51C9EE9",
        "Roles": [
          {
            "Ref": "CdkDeployRole9B95027D"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/Role/DefaultPolicy/Resource"
      }
    },
    "CdkDeployCodebuildSourceBucket89BCBFD5": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 5,
              "Status": "Enabled"
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "cdk-deploy-example"
          }
        ]
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/CodebuildSourceBucket/Resource"
      }
    },
    "CdkDeployCloudFormationRoleB18AEE56": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudformation.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AdministratorAccess"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "cdk-deploy-example"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/CloudFormationRole/Resource"
      }
    },
    "CdkDeployCodebuildProjectRoleE598841E": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "cdk-deploy-example"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/CodebuildProject/Role/Resource"
      }
    },
    "CdkDeployCodebuildProjectRoleDefaultPolicy9E1A5466": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:eu-west-1:112233445566:log-group:/aws/codebuild/",
                      {
                        "Ref": "CdkDeployCodebuildProject7215DCDC"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:eu-west-1:112233445566:log-group:/aws/codebuild/",
                      {
                        "Ref": "CdkDeployCodebuildProject7215DCDC"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":codebuild:eu-west-1:112233445566:report-group/",
                    {
                      "Ref": "CdkDeployCodebuildProject7215DCDC"
                    },
                    "-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "cloudformation:DescribeStacks",
                "cloudformation:GetTemplate",
                "cloudformation:CreateChangeSet",
                "cloudformation:DeleteStack",
                "cloudformation:DescribeChangeSet",
                "cloudformation:ExecuteChangeSet",
                "cloudformation:DescribeStackEvents",
                "cloudformation:DeleteChangeSet"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:PutObject*",
                "s3:Abort*",
                "s3:DeleteObject*"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::cdk-stagingbucket-*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::artifacts"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::artifacts/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CdkDeployCloudFormationRoleB18AEE56",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CdkDeployCodebuildSourceBucket89BCBFD5",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CdkDeployCodebuildSourceBucket89BCBFD5",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CdkDeployCodebuildProjectRoleDefaultPolicy9E1A5466",
        "Roles": [
          {
            "Ref": "CdkDeployCodebuildProjectRoleE598841E"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/CodebuildProject/Role/DefaultPolicy/Resource"
      }
    },
    "CdkDeployCodebuildProject7215DCDC": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "node:12",
          "ImagePullCredentialsType": "SERVICE_ROLE",
          "PrivilegedMode": false,
          "Type": "LINUX_CONTAINER"
        },
        "ServiceRole": {
          "Fn::GetAtt": [
            "CdkDeployCodebuildProjectRoleE598841E",
            "Arn"
          ]
        },
        "Source": {
          "BuildSpec": {
            "Fn::Join": [
              "",
              [
                "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"CDK_DEPLOY_ROLE_ARN\": \"",
                {
                  "Fn::GetAtt": [
                    "CdkDeployCloudFormationRoleB18AEE56",
                    "Arn"
                  ]
                },
                "\",\n      \"CDK_TOOLKIT_STACK_NAME\": \"cdk\"\n    }\n  },\n  \"phases\": {\n    \"build\": {\n      \"commands\": [\n        \"npm install -g aws-cdk\",\n        \"cdk --app \\\"$CODEBUILD_SRC_DIR_CLOUDASSEMBLY\\\" --role-arn \\\"$CDK_DEPLOY_ROLE_ARN\\\" --toolkit-stack-name \\\"$CDK_TOOLKIT_STACK_NAME\\\" --require-approval never deploy --exclusively $(cat stack-names.txt)\"\n      ]\n    }\n  }\n}"
              ]
            ]
          },
          "Type": "NO_SOURCE"
        },
        "Cache": {
          "Type": "NO_CACHE"
        },
        "EncryptionKey": "alias/aws/s3",
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "cdk-deploy-example"
          }
        ],
        "TimeoutInMinutes": 240
      },
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/CodebuildProject/Resource"
      }
    },
    "CdkDeployStartDeployFunctionServiceRole191AEEB8": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "cdk-deploy-example"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/StartDeployFunction/ServiceRole/Resource"
      }
    },
    "CdkDeployStartDeployFunctionServiceRoleDefaultPolicyCBAFBFD9": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CdkDeployCodebuildSourceBucket89BCBFD5",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CdkDeployCodebuildSourceBucket89BCBFD5",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "codebuild:StartBuild",
                "codebuild:BatchGetBuilds"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CdkDeployCodebuildProject7215DCDC",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CdkDeployStartDeployFunctionServiceRoleDefaultPolicyCBAFBFD9",
        "Roles": [
          {
            "Ref": "CdkDeployStartDeployFunctionServiceRole191AEEB8"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/StartDeployFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CdkDeployStartDeployFunctionC7011EBD": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async (event, context) => {\n    var _a;\n    const AWS = require(\"aws-sdk\");\n    const codebuild = new AWS.CodeBuild();\n    const s3 = new AWS.S3();\n    function requireEnv(name) {\n        const value = process.env[name];\n        if (value === undefined) {\n            throw new Error(`Missing ${name}`);\n        }\n        return value;\n    }\n    const projectName = requireEnv(\"PROJECT_NAME\");\n    const bucketName = requireEnv(\"BUCKET_NAME\");\n    const cdkContext = JSON.parse(requireEnv(\"CDK_CONTEXT\"));\n    // Since we pass the stack names as strings to the shell,\n    // be a bit restrictive of the valid values we can use.\n    const validStackName = /^[a-z0-9_][a-z0-9\\-_]*$/i;\n    const s3KeyPrefix = `${context.awsRequestId}/`;\n    // Validate the input.\n    if (typeof event.bucketName !== \"string\" ||\n        typeof event.bucketKey !== \"string\" ||\n        !Array.isArray(event.stackNames) ||\n        !event.stackNames.every((it) => typeof it === \"string\" && validStackName.test(it))) {\n        throw new Error(\"Input invalid: \" + JSON.stringify(event, undefined, \"  \"));\n    }\n    async function put(name, data) {\n        await s3\n            .putObject({\n            Bucket: bucketName,\n            Key: `${s3KeyPrefix}${name}`,\n            Body: data,\n        })\n            .promise();\n    }\n    await put(\"stack-names.txt\", event.stackNames.join(\" \"));\n    // Ensure that we run the script using same feature flags.\n    await put(\"cdk.json\", JSON.stringify({\n        context: cdkContext,\n    }));\n    const build = await codebuild\n        .startBuild({\n        projectName,\n        sourceTypeOverride: \"S3\",\n        sourceLocationOverride: `${bucketName}/${s3KeyPrefix}`,\n        secondarySourcesOverride: [\n            {\n                type: \"S3\",\n                location: `${event.bucketName}/${event.bucketKey}`,\n                sourceIdentifier: \"CLOUDASSEMBLY\",\n            },\n        ],\n    })\n        .promise();\n    const buildId = (_a = build.build) === null || _a === void 0 ? void 0 : _a.id;\n    if (buildId == null) {\n        throw new Error(\"Unknown build ID\");\n    }\n    return {\n        // This is the value the caller will use to fetch updated status.\n        // Avoid exposing what kind of ID this is, because we should be free\n        // to change implementation details.\n        jobId: buildId,\n    };\n};"
        },
        "Role": {
          "Fn::GetAtt": [
            "CdkDeployStartDeployFunctionServiceRole191AEEB8",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "PROJECT_NAME": {
              "Ref": "CdkDeployCodebuildProject7215DCDC"
            },
            "BUCKET_NAME": {
              "Ref": "CdkDeployCodebuildSourceBucket89BCBFD5"
            },
            "CDK_CONTEXT": "{}"
          }
        },
        "FunctionName": "start-deploy",
        "Handler": "index.handler",
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "cdk-deploy-example"
          }
        ],
        "Timeout": 30
      },
      "DependsOn": [
        "CdkDeployStartDeployFunctionServiceRoleDefaultPolicyCBAFBFD9",
        "CdkDeployStartDeployFunctionServiceRole191AEEB8"
      ],
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/StartDeployFunction/Resource"
      }
    },
    "CdkDeployStatusFunctionServiceRole38060AFB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "cdk-deploy-example"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/StatusFunction/ServiceRole/Resource"
      }
    },
    "CdkDeployStatusFunctionServiceRoleDefaultPolicy29077604": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "codebuild:BatchGetBuilds",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CdkDeployCodebuildProject7215DCDC",
                  "Arn"
                ]
              }
            },
            {
              "Action": "logs:GetLogEvents",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:logs:eu-west-1:112233445566:log-group:/aws/codebuild/",
                    {
                      "Ref": "CdkDeployCodebuildProject7215DCDC"
                    },
                    ":log-stream:*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CdkDeployStatusFunctionServiceRoleDefaultPolicy29077604",
        "Roles": [
          {
            "Ref": "CdkDeployStatusFunctionServiceRole38060AFB"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/StatusFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CdkDeployStatusFunction54BEBDAD": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async (event) => {\n    const AWS = require(\"aws-sdk\");\n    function requireEnv(name) {\n        const value = process.env[name];\n        if (value === undefined) {\n            throw new Error(`Missing ${name}`);\n        }\n        return value;\n    }\n    /**\n     * Get success status.\n     *\n     * A value of true means the job has completed successfully, while\n     * a value of false means the job did complete but not successfully.\n     *\n     * A null value means the job is still in progress and the\n     * completion status is not yet known.\n     */\n    function getSuccess(status) {\n        if (status == \"SUCCEEDED\") {\n            return true;\n        }\n        if (status == \"IN_PROGRESS\") {\n            return null;\n        }\n        return false;\n    }\n    async function getBuild(buildId) {\n        var _a, _b, _c;\n        const codebuild = new AWS.CodeBuild();\n        const result = await codebuild.batchGetBuilds({ ids: [buildId] }).promise();\n        if (((_a = result.builds) === null || _a === void 0 ? void 0 : _a.length) !== 1) {\n            throw new Error(`Expected 1 item, found ${(_c = (_b = result.builds) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : \"unknown\"}`);\n        }\n        return result.builds[0];\n    }\n    async function getLogs(build) {\n        if (build.logs == null) {\n            throw new Error(\"Missing logs attribute on build\");\n        }\n        if (build.logs.groupName == null) {\n            throw new Error(\"Missing log groupName\");\n        }\n        if (build.logs.streamName == null) {\n            throw new Error(\"Missing log streamName\");\n        }\n        const cloudwatchlogs = new AWS.CloudWatchLogs();\n        const data = await cloudwatchlogs\n            .getLogEvents({\n            logGroupName: build.logs.groupName,\n            logStreamName: build.logs.streamName,\n            startFromHead: true,\n        })\n            .promise();\n        if (data.events == null) {\n            throw new Error(\"Failed to fetch log events\");\n        }\n        // The logs contain newlines, so no need to add more.\n        return data.events.map((it) => it.message).join(\"\");\n    }\n    const projectName = requireEnv(\"PROJECT_NAME\");\n    // Validate the input.\n    if (typeof event.jobId !== \"string\" ||\n        !event.jobId.startsWith(`${projectName}:`)) {\n        throw new Error(\"Input invalid: \" + JSON.stringify(event, undefined, \"  \"));\n    }\n    const build = await getBuild(event.jobId);\n    const success = build.buildStatus == null ? null : getSuccess(build.buildStatus);\n    // Read logs from CloudWatch if completed.\n    const logs = success != null ? await getLogs(build) : null;\n    return {\n        jobId: event.jobId,\n        success,\n        logs,\n    };\n};"
        },
        "Role": {
          "Fn::GetAtt": [
            "CdkDeployStatusFunctionServiceRole38060AFB",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "PROJECT_NAME": {
              "Ref": "CdkDeployCodebuildProject7215DCDC"
            }
          }
        },
        "FunctionName": "status",
        "Handler": "index.handler",
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "Project",
            "Value": "my-project"
          },
          {
            "Key": "SourceRepo",
            "Value": "github/capralifecycle/liflig-cdk"
          },
          {
            "Key": "StackName",
            "Value": "cdk-deploy-example"
          }
        ],
        "Timeout": 30
      },
      "DependsOn": [
        "CdkDeployStatusFunctionServiceRoleDefaultPolicy29077604",
        "CdkDeployStatusFunctionServiceRole38060AFB"
      ],
      "Metadata": {
        "aws:cdk:path": "cdk-deploy-example/CdkDeploy/StatusFunction/Resource"
      }
    }
  },
  "Outputs": {
    "CdkDeployRoleToBeAssumedArn81F19EA6": {
      "Value": {
        "Fn::GetAtt": [
          "CdkDeployRole9B95027D",
          "Arn"
        ]
      }
    },
    "CdkDeployStatusFunctionArnBA3D8551": {
      "Value": {
        "Fn::GetAtt": [
          "CdkDeployStatusFunction54BEBDAD",
          "Arn"
        ]
      }
    },
    "CdkDeployStartDeployFunctionArn175B012C": {
      "Value": {
        "Fn::GetAtt": [
          "CdkDeployStartDeployFunctionC7011EBD",
          "Arn"
        ]
      }
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}